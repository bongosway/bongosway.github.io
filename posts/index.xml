<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Posts on Thought before Tools</title>
        <link>https://bongosway.github.io/posts.html</link>
        <description>Recent content in Posts on Thought before Tools</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>en-us</language>
        <copyright>&lt;a href=&#34;https://creativecommons.org/licenses/by-nc/4.0/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CC BY-NC 4.0&lt;/a&gt;</copyright>
        <lastBuildDate>Sun, 05 Jul 2020 10:04:17 +0100</lastBuildDate>
        <atom:link href="https://bongosway.github.io/posts/index.xml" rel="self" type="application/rss+xml" />
        
        <item>
            <title>How to solve google toImmutableSet() NoSuchMethodError on a Maven project</title>
            <link>https://bongosway.github.io/posts/2020/07/how-to-solve-google-toimmutableset-nosuchmethoderror-on-a-maven-project.html</link>
            <pubDate>Sun, 05 Jul 2020 10:04:17 +0100</pubDate>
            
            <guid>https://bongosway.github.io/posts/2020/07/how-to-solve-google-toimmutableset-nosuchmethoderror-on-a-maven-project.html</guid>
            <description>Introduction Whilst building a demo application showcasing google AutoService, I encountered the below error:
 java.lang.NoSuchMethodError: com.google.common.collect.ImmutableSet.toImmutableSet()Ljava/util/stream/Collector; Searching through the internet I discoverd most solutions recommended upgrading the Google Guava version, but upgrading the version did not resolve my problem.
The main cause of this error, is putting the wrong Autoservice dependency in the classpath.
If your POM file resembles the one below, then you are most likely get this error.</description>
            <content type="html"><![CDATA[<h2 id="introduction">Introduction</h2>
<p>Whilst building a demo application showcasing google
<a href="https://github.com/google/auto/tree/master/service">AutoService</a>, I encountered the below error:</p>
<pre><code> java.lang.NoSuchMethodError: com.google.common.collect.ImmutableSet.toImmutableSet()Ljava/util/stream/Collector;
</code></pre><p>Searching through the internet I discoverd most solutions recommended upgrading the <a href="https://github.com/google/guava">Google Guava</a> version, but upgrading the version did not resolve my problem.</p>
<p>The main cause of this error, is putting the wrong <code>Autoservice</code> dependency in the classpath.</p>
<p>If your POM file resembles the one below, then you are most likely get this error.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-xml" data-lang="xml"> <span style="color:#f92672">&lt;/dependencies&gt;</span>
 	<span style="color:#f92672">&lt;dependency&gt;</span>
      <span style="color:#f92672">&lt;groupId&gt;</span>com.google.auto.service<span style="color:#f92672">&lt;/groupId&gt;</span>
      <span style="color:#f92672">&lt;artifactId&gt;</span>auto-service<span style="color:#f92672">&lt;/artifactId&gt;</span>
      <span style="color:#f92672">&lt;version&gt;</span>1.0-rc7<span style="color:#f92672">&lt;/version&gt;</span>
    <span style="color:#f92672">&lt;/dependency&gt;</span>
 <span style="color:#f92672">&lt;/dependencies&gt;</span>
</code></pre></div><p>In this guide, you will solve the compilation error when using <strong>AutoService</strong> on a <code>maven</code> project to register the right implementation of types in the META-INF/services.</p>
<p>When you&rsquo;re finished, you&rsquo;ll be able to build jar files with the right
<code>META-INF/services</code> information.</p>
<h2 id="prerequisites">Prerequisites</h2>
<p>Before you begin this guide you&rsquo;ll need:</p>
<ul>
<li>Read up the difference between a maven dependency and plugin
<ul>
<li>This <a href="https://stackoverflow.com/a/26293404">Stackoverflow Post</a> answer this question</li>
<li>Read Sonatype&rsquo;s book <a href="https://books.sonatype.com/mvnref-book/reference/index.html">Maven: A Complete Reference</a></li>
</ul>
</li>
</ul>
<h2 id="step-1--check-what-is-in-your-dependency-tree">Step 1 — Check what is in your dependency tree</h2>
<p>We need to establish what we have in our dependency tree, because maven might be pulling in a version of the jar as a transitive dependency which might not work with your project</p>
<p>Run the following command to see the jar file in your tree:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">$ mvn dependency:tree

</code></pre></div><p>if the below are missing then follow step 2;</p>
<p><code>com.google.auto.service:auto-service:jar:&lt;version&gt;:compile</code></p>
<p><code>com.google.auto.service:auto-service-annotations:jar:&lt;version&gt;:compile</code></p>
<h2 id="step-2--add-autoservice-annotation-dependency-to-pom-file">Step 2 — Add AutoService Annotation Dependency to POM file</h2>
<p>Add the following compile-time dependency to your classpath so the project can compile and pull in the relevant classes.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-xml" data-lang="xml"><span style="color:#f92672">&lt;dependencies&gt;</span>
  <span style="color:#f92672">&lt;dependency&gt;</span>
    <span style="color:#f92672">&lt;groupId&gt;</span>com.google.auto.service<span style="color:#f92672">&lt;/groupId&gt;</span>
    <span style="color:#f92672">&lt;artifactId&gt;</span>auto-service-annotations<span style="color:#f92672">&lt;/artifactId&gt;</span>
    <span style="color:#f92672">&lt;version&gt;</span>${auto-service.version}<span style="color:#f92672">&lt;/version&gt;</span>
  <span style="color:#f92672">&lt;/dependency&gt;</span>
<span style="color:#f92672">&lt;/dependencies&gt;</span>
</code></pre></div><p>Run the below to ensure your project compiles:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">$ mvn clean compile
</code></pre></div><p>Now run the package command to generate the jar file in your target directory</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">mvn clean package
</code></pre></div><p>Spy the content of the Jar file to view the generated <code>AutoService metadata</code></p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">$  jar tf target/&lt;jar-filename&gt;.jar | grep META-INF/services/
</code></pre></div><p>You should not get any results.</p>
<p>Developers sometimes, forget to include the right metadata instructions when creating the  jar file and maven will not raise any error.
This is the exact problem <code>Autoservice</code> solves for us, removing the need to tell maven of all your metadata rule.</p>
<p>The next step will walk you through the process of adding the processor.</p>
<h2 id="step-3--tell-maven-to-generate-the-metadata">Step 3 — Tell Maven to generate the Metadata</h2>
<p>Add the following configuration to the compiler plugin</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-xml" data-lang="xml"><span style="color:#f92672">&lt;plugins&gt;</span>
  <span style="color:#f92672">&lt;plugin&gt;</span>
    <span style="color:#f92672">&lt;artifactId&gt;</span>maven-compiler-plugin<span style="color:#f92672">&lt;/artifactId&gt;</span>
    <span style="color:#f92672">&lt;configuration&gt;</span>
      <span style="color:#f92672">&lt;annotationProcessorPaths&gt;</span>
        <span style="color:#f92672">&lt;path&gt;</span>
          <span style="color:#f92672">&lt;groupId&gt;</span>com.google.auto.service<span style="color:#f92672">&lt;/groupId&gt;</span>
          <span style="color:#f92672">&lt;artifactId&gt;</span>auto-service<span style="color:#f92672">&lt;/artifactId&gt;</span>
          <span style="color:#f92672">&lt;version&gt;</span>${auto-service.version}<span style="color:#f92672">&lt;/version&gt;</span>
        <span style="color:#f92672">&lt;/path&gt;</span>
      <span style="color:#f92672">&lt;/annotationProcessorPaths&gt;</span>
    <span style="color:#f92672">&lt;/configuration&gt;</span>
  <span style="color:#f92672">&lt;/plugin&gt;</span>
<span style="color:#f92672">&lt;/plugins&gt;</span>
</code></pre></div><p>Now run the package again to generate the jar file in your target directory</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">mvn clean package
</code></pre></div><p>Spy the content of the Jar file again, to view the generated metadata</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">$  jar tf target/&lt;jar-filename&gt;.jar | grep META-INF/services/
</code></pre></div><p>Assuming our processor class is <code>org.ihq.MyAutoclass</code>, this time the output should resemble below</p>
<pre><code>META-INF/services/
META-INF/services/org.ihq.MyAutoclass

</code></pre><h2 id="conclusion">Conclusion</h2>
<p>You’ve set up <code>Google AutoService</code> with <code>Maven</code> to autogenerate metadata without compile error(s).</p>
]]></content>
        </item>
        
    </channel>
</rss>
