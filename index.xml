<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Thought before Tools</title><link>https://bongosway.github.io/</link><description>Recent content on Thought before Tools</description><generator>Hugo -- gohugo.io</generator><language>en-gb</language><copyright>&lt;a href="https://creativecommons.org/licenses/by-nc/4.0/" target="_blank" rel="noopener">CC BY-NC 4.0&lt;/a></copyright><lastBuildDate>Fri, 01 Jan 2021 15:59:11 +0000</lastBuildDate><atom:link href="https://bongosway.github.io/index.xml" rel="self" type="application/rss+xml"/><item><title>My 2020 In Review: Staying Strong</title><link>https://bongosway.github.io/posts/my-2020-in-review-staying-strong/</link><pubDate>Fri, 01 Jan 2021 15:59:11 +0000</pubDate><guid>https://bongosway.github.io/posts/my-2020-in-review-staying-strong/</guid><description>Introduction Hey everyone! Iâ€™m excited to share with you my year end review for 2020.
2020 has been about staying strong mentally! ðŸ˜ƒ
Iâ€™m glad to say that whilst 2020 might have been a tough year, I was able to achieve things I am proud of ðŸ’ª.
Iâ€™m excited at what 2021 is going to bring.
Philippians 4:8:
In conclusion, my friends, fill your minds with those things that are good and that deserve praise: things that are true, noble, right, pure, lovely, and honourable.</description></item><item><title>A Beginner's Guide to Designing Page Objects - Pt.2</title><link>https://bongosway.github.io/posts/a-beginners-guide-to-designing-page-objects-pt.2/</link><pubDate>Sat, 26 Sep 2020 03:59:58 +0100</pubDate><guid>https://bongosway.github.io/posts/a-beginners-guide-to-designing-page-objects-pt.2/</guid><description>Introduction In the last post we created our first Page Object, (read it here ) we were able to run a test to verify it works as expected.
In this guide, we&amp;rsquo;ll apply design principles to refactor the test and page objects we created.
When you&amp;rsquo;re finished, you&amp;rsquo;ll be able to create effective page objects for any UI interface you encounter using design principles.
Prerequisites Before you begin this guide you&amp;rsquo;ll need the following:</description></item><item><title>A Beginner's Guide to Designing Page Objects - Pt.1</title><link>https://bongosway.github.io/posts/a-beginners-guide-to-designing-page-objects-pt.1/</link><pubDate>Sat, 08 Aug 2020 07:57:54 +0100</pubDate><guid>https://bongosway.github.io/posts/a-beginners-guide-to-designing-page-objects-pt.1/</guid><description>Introduction Page Object is a popular design pattern used to represent services provided by a page (reads the rendered page you see on your screen) especially when writing test against a web page. This pattern is mainly popularised by the Selenium Browser Automation tool.
In this guide, we create a Page Object for the the Google home and search results page.
When you&amp;rsquo;re finished, you&amp;rsquo;ll be able to create effective page objects for any UI interface you encounter.</description></item><item><title>Should I Remove PageObjects from my Test Class?</title><link>https://bongosway.github.io/posts/should-i-remove-pageobjects-from-my-test-class/</link><pubDate>Sun, 12 Jul 2020 10:32:43 +0100</pubDate><guid>https://bongosway.github.io/posts/should-i-remove-pageobjects-from-my-test-class/</guid><description>The short answer is YES!
Introduction The Page Object Pattern is a popular design pattern used to represent services provided by a page (reads the rendered page you see on your screen). Whilst this is a good pattern to drive the application under test, it should not be visible to the test class.
Why? The test class is no longer isolated from internal code changes Binds the test class to the underlying technology/library Low-level code details pollute the test class The test class should represent the domain behaviours only, not the implementation.</description></item><item><title>How to solve the NoSuchMethodError toImmutableSet() error when using Google Autoservice</title><link>https://bongosway.github.io/posts/how-to-solve-the-nosuchmethoderror-toimmutableset-error-when-using-google-autoservice/</link><pubDate>Sun, 05 Jul 2020 00:00:00 +0000</pubDate><guid>https://bongosway.github.io/posts/how-to-solve-the-nosuchmethoderror-toimmutableset-error-when-using-google-autoservice/</guid><description>Introduction Whilst building a demo application showcasing google AutoService, I encountered the below error:
java.lang.NoSuchMethodError: com.google.common.collect.ImmutableSet.toImmutableSet()Ljava/util/stream/Collector; Searching through the internet, most solutions recommended upgrading the Google Guava version but that did not resolve the problem.
The main cause of this error, was putting the wrong Autoservice dependency in the classpath.
If your POM file has the below dependency, then you are most likely get this error.
&amp;lt;/dependencies&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;com.google.auto.service&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;auto-service&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;1.</description></item></channel></rss>