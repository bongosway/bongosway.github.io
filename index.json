[{"categories":["Year Review"],"content":"Introduction Hey everyone! I’m excited to share with you my year end review for 2020. 2020 has been about staying strong mentally! 😃 I’m glad to say that whilst 2020 might have been a tough year, I was able to achieve things I am proud of 💪. I’m excited at what 2021 is going to bring. Philippians 4:8: In conclusion, my friends, fill your minds with those things that are good and that deserve praise: things that are true, noble, right, pure, lovely, and honourable. ","date":"2021-01-01","objectID":"/year-review/:1:0","tags":["Reflection","Review"],"title":"My 2020 In Review: Staying Strong","uri":"/year-review/"},{"categories":["Year Review"],"content":"Personal Development Jolt Switch - August - September 2020 What an amazing course! I enjoyed every bit of it, made new friends, improved the quality of my network and started on the path to becoming a CTO. ","date":"2021-01-01","objectID":"/year-review/:2:0","tags":["Reflection","Review"],"title":"My 2020 In Review: Staying Strong","uri":"/year-review/"},{"categories":["Year Review"],"content":"Some feedback from my fellow soji’s that made me happy “Very cleaver, can solve every computer problem and clearly a deep thinker” “Thanks for sharing all your knowledge in class \u0026 on slack!\" “Edi - I’ll definitely miss, we’ve had a great time and a few laughs in the break out rooms.\" Improved Communication Did a lot of DIY Joined CTO Community Mentored more Test Engineers, learnt alot about myself in the process ","date":"2021-01-01","objectID":"/year-review/:2:1","tags":["Reflection","Review"],"title":"My 2020 In Review: Staying Strong","uri":"/year-review/"},{"categories":["Year Review"],"content":"Writing Started a Blog Software Testing Weekly Magazine and Ministry of Testing featured my posts Was surprised to see my first attempt at blogging did good for the community. 💪 🥇 1st most popular article of the 37th issue: \"A Beginner’s Guide to Designing Page Objects — Pt.1\" by @bongosway https://t.co/dJQFPex8yj — Software Testing Weekly 🚀 (@QANewsletter) September 24, 2020 🥈 2nd most popular article of the 42nd issue: \"A Beginner’s Guide to Designing Page Objects — Pt.2\" by @bongoswayhttps://t.co/r5WruHUcU6 — Software Testing Weekly 🚀 (@QANewsletter) October 29, 2020 ","date":"2021-01-01","objectID":"/year-review/:3:0","tags":["Reflection","Review"],"title":"My 2020 In Review: Staying Strong","uri":"/year-review/"},{"categories":["Year Review"],"content":"Speaking and Coaching Guest lecturer, teaching students introduction to Test automation. Conducted business seminar for a Charity in Colchester (before Covid-19 😉). Coached few testers into leadership roles. ","date":"2021-01-01","objectID":"/year-review/:4:0","tags":["Reflection","Review"],"title":"My 2020 In Review: Staying Strong","uri":"/year-review/"},{"categories":["Year Review"],"content":"Open Source The Selenium core team accepted 4 of my Pull requests 🥳 I got featured by Kong Inc for writing an Insomnia plugin to prevent storing password in plain text. Thank you Insomnia Community! Together we discovered 3 solutions for avoiding plain-text passwords in Insomnia. Check them out: https://t.co/DNaFiKEtcz 🙏 @GetInsomnia @DauleDK @bongosway#opensource — Kong Inc. (@thekonginc) December 17, 2020 ","date":"2021-01-01","objectID":"/year-review/:5:0","tags":["Reflection","Review"],"title":"My 2020 In Review: Staying Strong","uri":"/year-review/"},{"categories":["Year Review"],"content":"2021: What’s the Plan? Help more engineers become better communicators Continue on my CTO path Eat more healthy food Exercise more Take more technology leadership courses Start a foundation Revive the project - Empowering Children with Confidence, Communication and Computing Skills. Thank you so much for sticking around. 🙇‍🙏 Look forward to connecting with and learning from you in this new year! 😃🙏👍🤗 Let’s go 🏃‍♂️🏃‍♂️🏃‍♂️ 🚀 🚀 🚀 ","date":"2021-01-01","objectID":"/year-review/:6:0","tags":["Reflection","Review"],"title":"My 2020 In Review: Staying Strong","uri":"/year-review/"},{"categories":["UI Automation"],"content":"Introduction In the last post, we applied design techniques to refactor the test class and the underlying code design. Info Read it here In this final guide, we will look at how to refactor a page object in response to changes from the business. When you finish reading, you will be able to create effective page objects for any UI interface you encounter using design principles. ","date":"2021-01-18","objectID":"/a-beginners-guide-to-designing-page-objects-pt.3/:1:0","tags":["Selenium","Automation"],"title":"A Beginner's Guide to Designing Page Objects - Pt.3","uri":"/a-beginners-guide-to-designing-page-objects-pt.3/"},{"categories":["UI Automation"],"content":"Prerequisites Before you begin this guide you’ll need the following: Info Read Part Two Let’s do it 💪💪💪 ","date":"2021-01-18","objectID":"/a-beginners-guide-to-designing-page-objects-pt.3/:2:0","tags":["Selenium","Automation"],"title":"A Beginner's Guide to Designing Page Objects - Pt.3","uri":"/a-beginners-guide-to-designing-page-objects-pt.3/"},{"categories":["UI Automation"],"content":"The Current Test: test classSearchEngineTest.java \" SearchEngineTest.java ","date":"2021-01-18","objectID":"/a-beginners-guide-to-designing-page-objects-pt.3/:3:0","tags":["Selenium","Automation"],"title":"A Beginner's Guide to Designing Page Objects - Pt.3","uri":"/a-beginners-guide-to-designing-page-objects-pt.3/"},{"categories":["UI Automation"],"content":"New Requirement: Add test to search from the results page. There are two Test cases now. We should write them out again so it is clear Testcase 1: User can start search from Home page Be on the Home page Type Selenium Java in the searchbox click the first suggestion from auto-suggest dropdown Assert results are displayed on the search page. Testcase 2: User can start search from results page Be on the Search results page Type Selenium Java in the searchbox click the first suggestion from auto-suggest dropdown Assert results are displayed on the search page. Notice how similar this journey is to our existing test case. The only difference is one starts from the home page, the other from results page ","date":"2021-01-18","objectID":"/a-beginners-guide-to-designing-page-objects-pt.3/:3:1","tags":["Selenium","Automation"],"title":"A Beginner's Guide to Designing Page Objects - Pt.3","uri":"/a-beginners-guide-to-designing-page-objects-pt.3/"},{"categories":["UI Automation"],"content":"Step 1 — Add the new test case new casenew test case added \" new test case added ","date":"2021-01-18","objectID":"/a-beginners-guide-to-designing-page-objects-pt.3/:4:0","tags":["Selenium","Automation"],"title":"A Beginner's Guide to Designing Page Objects - Pt.3","uri":"/a-beginners-guide-to-designing-page-objects-pt.3/"},{"categories":["UI Automation"],"content":"What has changed? We added two new methods openHomePage() \u0026 openSearchPage() to the search engine object, to make sure the test starts from the right page. We changed the test name, assertion and the message returned on failure. We removed all references to WebDriver from the test class. NOTHING ELSE! That’s right. Nothing else needed to change in the test class, because we have written a resilient class. 😉 ","date":"2021-01-18","objectID":"/a-beginners-guide-to-designing-page-objects-pt.3/:4:1","tags":["Selenium","Automation"],"title":"A Beginner's Guide to Designing Page Objects - Pt.3","uri":"/a-beginners-guide-to-designing-page-objects-pt.3/"},{"categories":["UI Automation"],"content":"Step 2 — Let’s update the interface with the 2 new methods new caseSearchEngine.java \" SearchEngine.java ","date":"2021-01-18","objectID":"/a-beginners-guide-to-designing-page-objects-pt.3/:5:0","tags":["Selenium","Automation"],"title":"A Beginner's Guide to Designing Page Objects - Pt.3","uri":"/a-beginners-guide-to-designing-page-objects-pt.3/"},{"categories":["UI Automation"],"content":"Step 3 - Let’s implement the new methods. new caseGoogleSearchEngine.java \" GoogleSearchEngine.java ","date":"2021-01-18","objectID":"/a-beginners-guide-to-designing-page-objects-pt.3/:6:0","tags":["Selenium","Automation"],"title":"A Beginner's Guide to Designing Page Objects - Pt.3","uri":"/a-beginners-guide-to-designing-page-objects-pt.3/"},{"categories":["UI Automation"],"content":"Step 4 - Let’s refactor the searchFor method in the GoogleSearchEngine Class. Looking at current implementation below: searchforGoogleSearchEngine#searchFor \" GoogleSearchEngine#searchFor We notice the method began from the GoogleHomePage, entered SearchText via the HomePage and results is also coming from the homepage. In a nutshell, the implementation of searchFor() couples it to the GoogleHomePage making it hard to cater for the new requirement. What do we do? Decouple SearchFor implementation from GoogleHomePage Find the common element between Homepage \u0026 Result page Go to homepage and search for #searchForm hpHomePage \" HomePage Go to Results page and search for #searchForm rpResults Page \" Results Page You will notice the searchForm is common across all Google Pages. Thus, making it a candidate to extract from the Homepage and move to its own class with the search behaviours. Let’s create a SearchForm Class sfSearchForm.java \" SearchForm.java Refactor searchFor() to use the searchForm in the GoogleSearchEngine class. nsfNew SearchFor() \" New SearchFor() Add a Search Results page to extract results into Domain class SearchResults. This page will extract the link \u0026 linkText values from the WebElement List and populates the SearchResults domain object. sr-pSearchResult Page \" SearchResult Page s-rSearchResult Domain Object \" SearchResult Domain Object ","date":"2021-01-18","objectID":"/a-beginners-guide-to-designing-page-objects-pt.3/:7:0","tags":["Selenium","Automation"],"title":"A Beginner's Guide to Designing Page Objects - Pt.3","uri":"/a-beginners-guide-to-designing-page-objects-pt.3/"},{"categories":["UI Automation"],"content":"Now are back to the where we started. The test class! But this time, we have refactored all the framework code and the test should work perfectly. testclassNew Test Class \" New Test Class ","date":"2021-01-18","objectID":"/a-beginners-guide-to-designing-page-objects-pt.3/:7:1","tags":["Selenium","Automation"],"title":"A Beginner's Guide to Designing Page Objects - Pt.3","uri":"/a-beginners-guide-to-designing-page-objects-pt.3/"},{"categories":["UI Automation"],"content":"What have we done so far? Refactored the test class add new test case and remove framework code like WebDriver. Refactored GoogleSearchEngine#searchFor method to not depend on GoogleHomePage Added Navigation methods to the SearchEngine Interface. Created SearchForm component to handle all search related task. Created SearchResultPage to collect result. ","date":"2021-01-18","objectID":"/a-beginners-guide-to-designing-page-objects-pt.3/:8:0","tags":["Selenium","Automation"],"title":"A Beginner's Guide to Designing Page Objects - Pt.3","uri":"/a-beginners-guide-to-designing-page-objects-pt.3/"},{"categories":["UI Automation"],"content":"Conclusion This completes the three part Page Object series 🥳. Now go forth and use the lessons from this series to build page objects for your projects. ","date":"2021-01-18","objectID":"/a-beginners-guide-to-designing-page-objects-pt.3/:9:0","tags":["Selenium","Automation"],"title":"A Beginner's Guide to Designing Page Objects - Pt.3","uri":"/a-beginners-guide-to-designing-page-objects-pt.3/"},{"categories":["UI Automation"],"content":"Things to Note Note For brevity the classes were edited to focus on the relevant details, but don’t worry you can find the complete code in my Github repo. https://github.com/bongosway/selenium-starter I am happy to answer questions you may have, reach me on any of my handles. ","date":"2021-01-18","objectID":"/a-beginners-guide-to-designing-page-objects-pt.3/:10:0","tags":["Selenium","Automation"],"title":"A Beginner's Guide to Designing Page Objects - Pt.3","uri":"/a-beginners-guide-to-designing-page-objects-pt.3/"},{"categories":["UI Automation"],"content":"Introduction In the last post we created our first Page Object, (read it here ) we were able to run a test to verify it works as expected. In this guide, we’ll apply design principles to refactor the test and page objects we created. When you’re finished, you’ll be able to create effective page objects for any UI interface you encounter using design principles. ","date":"2020-09-26","objectID":"/a-beginners-guide-to-designing-page-objects-pt.2/:1:0","tags":["Selenium","Automation"],"title":"A Beginner's Guide to Designing Page Objects - Pt.2","uri":"/a-beginners-guide-to-designing-page-objects-pt.2/"},{"categories":["UI Automation"],"content":"Prerequisites Before you begin this guide: Read part one Let’s do it 💪 ","date":"2020-09-26","objectID":"/a-beginners-guide-to-designing-page-objects-pt.2/:2:0","tags":["Selenium","Automation"],"title":"A Beginner's Guide to Designing Page Objects - Pt.2","uri":"/a-beginners-guide-to-designing-page-objects-pt.2/"},{"categories":["UI Automation"],"content":"Lets start the refactoring with the test class: test classGoogleUITest.java \" GoogleUITest.java ","date":"2020-09-26","objectID":"/a-beginners-guide-to-designing-page-objects-pt.2/:3:0","tags":["Selenium","Automation"],"title":"A Beginner's Guide to Designing Page Objects - Pt.2","uri":"/a-beginners-guide-to-designing-page-objects-pt.2/"},{"categories":["UI Automation"],"content":"What areas we can improve and why: RULE: Your Test Class Should test behaviour NOT implementation. GoogleHomePage homePage = new GoogleHomePage(driver); This ties the test to the page object implementation of GoogleHomePage, therefore if the page object API changes, the test would need to be modified. SearchResultPage resultPage = homePage.enterSearchText(\"Selenium\").selectFirstAutoSuggest(); How the actions are done is not a concern for the test class i.e if AutoSuggest feature is removed, then this test class breaks. assertTrue(resultPage.getResultSetCount() \u003e 5); This breaks the “Tell, Don’t Ask” principle\" i.e the logic of checking result set against a number should not be in the test. If results and computational logic changes it will break the test. ","date":"2020-09-26","objectID":"/a-beginners-guide-to-designing-page-objects-pt.2/:3:1","tags":["Selenium","Automation"],"title":"A Beginner's Guide to Designing Page Objects - Pt.2","uri":"/a-beginners-guide-to-designing-page-objects-pt.2/"},{"categories":["UI Automation"],"content":"Let’s rewrite the test class to remove these areas of concern: Step 1: Identify the domain concept and the behaviours connected to it: For us it will be: Concept - SearchEngine \u0026 SearchResult Behaviour - search for a term \u0026 return results for that term Logic - SearchResult is the domain object we tell to perform desired logic on the search result. Using these approach to rewrite the test class, it should now look like this: RefactoredTestRefactoredTest.java \" RefactoredTest.java Voilà! all the clicks and selects et al have now disappeared! ","date":"2020-09-26","objectID":"/a-beginners-guide-to-designing-page-objects-pt.2/:3:2","tags":["Selenium","Automation"],"title":"A Beginner's Guide to Designing Page Objects - Pt.2","uri":"/a-beginners-guide-to-designing-page-objects-pt.2/"},{"categories":["UI Automation"],"content":"Your test class is now decoupled from the page object. If you replace SearchEngine searchEngine = new GoogleSearchEngine(driver); with SearchEngine searchEngine = new BingSearchEngine(driver); The test won’t concern itself about the underlying search engine in use. Step 2: 1. Let’s build the behaviour as an Interface interfaceSearchEngine interface \" SearchEngine interface 2. Let’s build an implementation of the Interface using the page object to fulfil the needs of the behaviour. implement interfaceGoogle SearchEngine implementation \" Google SearchEngine implementation 3. This is the GoogleHomePage PageObject homePageGoogleHomePage \" GoogleHomePage 4. Let’s build the SearchResult search resultSearchResult \" SearchResult ","date":"2020-09-26","objectID":"/a-beginners-guide-to-designing-page-objects-pt.2/:3:3","tags":["Selenium","Automation"],"title":"A Beginner's Guide to Designing Page Objects - Pt.2","uri":"/a-beginners-guide-to-designing-page-objects-pt.2/"},{"categories":["UI Automation"],"content":"What have we done so far? Refactored the test class to contain only behaviour not implementation. Identify the domain concept and related behaviours. Created an Interface to model the behaviour. Created a concrete class to implement the interface using pageobject to satisfy the behaviour. Modify the GoogleHomePage PageObject. Created Domain Class to hold SearchResult. ","date":"2020-09-26","objectID":"/a-beginners-guide-to-designing-page-objects-pt.2/:4:0","tags":["Selenium","Automation"],"title":"A Beginner's Guide to Designing Page Objects - Pt.2","uri":"/a-beginners-guide-to-designing-page-objects-pt.2/"},{"categories":["UI Automation"],"content":"See all classes here for easy reference. Note Don’t copy and paste. Type the below code by hand. Read this brilliant article to understand why. RefactoredTestTestClass.java \" TestClass.java interfaceSearchEngine Optimise \" SearchEngine Optimise implement interfaceGoogle SearchEngine implementation \" Google SearchEngine implementation homePageGoogleHomePage \" GoogleHomePage search resultSearchResults \" SearchResults ","date":"2020-09-26","objectID":"/a-beginners-guide-to-designing-page-objects-pt.2/:5:0","tags":["Selenium","Automation"],"title":"A Beginner's Guide to Designing Page Objects - Pt.2","uri":"/a-beginners-guide-to-designing-page-objects-pt.2/"},{"categories":["UI Automation"],"content":"Conclusion In this article we have applied design techniques to optimise the test and the underlying code design. Now you can run the test and put your result in the comments section. ","date":"2020-09-26","objectID":"/a-beginners-guide-to-designing-page-objects-pt.2/:6:0","tags":["Selenium","Automation"],"title":"A Beginner's Guide to Designing Page Objects - Pt.2","uri":"/a-beginners-guide-to-designing-page-objects-pt.2/"},{"categories":["UI Automation"],"content":"Things to Note In the next post in this series, we shall be applying design techniques to optimize the GoogleHomePage PageObject. Before then, feel free to write another test using a completely different search engine in the test class and create your implementation of the interface. I am happy to answer questions you may have, reach me on any of my handles. ","date":"2020-09-26","objectID":"/a-beginners-guide-to-designing-page-objects-pt.2/:7:0","tags":["Selenium","Automation"],"title":"A Beginner's Guide to Designing Page Objects - Pt.2","uri":"/a-beginners-guide-to-designing-page-objects-pt.2/"},{"categories":["UI Automation"],"content":"Introduction Page Object is a popular design pattern used to represent services provided by a page (reads the rendered page you see on your screen) especially when writing test against a web page. This pattern is mainly popularised by the Selenium Browser Automation tool. In this guide, we create a Page Object for the the Google home and search results page. When you’re finished, you’ll be able to create effective page objects for any UI interface you encounter. ","date":"2020-08-08","objectID":"/beginners-guide-to-designing-page-objects-pt.1/:1:0","tags":["Selenium","Automation"],"title":"A Beginner's Guide to Designing Page Objects - Pt.1","uri":"/beginners-guide-to-designing-page-objects-pt.1/"},{"categories":["UI Automation"],"content":"Prerequisites Before you begin this guide you’ll need the following: An IDE (I use IntelliJ Community Edition) Maven See Installation help here A Selenium project that compiles (selenium version 4 and above) TestNG This example uses the Java binding. Note This guide will not cover locator strategies. It is well covered in the selenium website documentation Let’s do it 💪 ","date":"2020-08-08","objectID":"/beginners-guide-to-designing-page-objects-pt.1/:2:0","tags":["Selenium","Automation"],"title":"A Beginner's Guide to Designing Page Objects - Pt.1","uri":"/beginners-guide-to-designing-page-objects-pt.1/"},{"categories":["UI Automation"],"content":"What are we testing? We want to verify that the results page displays more than five links. ","date":"2020-08-08","objectID":"/beginners-guide-to-designing-page-objects-pt.1/:3:0","tags":["Selenium","Automation"],"title":"A Beginner's Guide to Designing Page Objects - Pt.1","uri":"/beginners-guide-to-designing-page-objects-pt.1/"},{"categories":["UI Automation"],"content":"User journey We need to figure out the user journey that makes up the test. Goto google.com Type Selenium in the searchbox click the first suggestion from auto-suggest dropdown Assert that more than 5 results sets are displayed on the search page. Writing test first helps you get a clear picture of what Page Objects to build, and what apis the page object should expose. test classGoogleUITest.java \" GoogleUITest.java Now we need to: Identify the elements we need from the HomePage google home pageGoogle Homepage \" Google Homepage From the picture above, there are multiple elements on the page, but we only need two of them Searchbox Auto-Suggest dropdown Tip Don’t make your page object a kitchen sink by selecting every possible object you see on the page. Select only elements relevant for the user journey, anything more becomes YAGNI Now let’s move to how we locate elements using the web console: Locate desired elements on the page There are several ways to locate the element we desire, e.g. by looking at the codebase, using selector tools etc. Our focus for this guide is to use the browser debug console. Let’s go: Use Shortcut CMD + ALT + i to open the web console We locate our first element - The Searchbox Select the element picker Point the element picker at the Searchbox, then click. Use the console to confirm if you got the right element node. if it works on the browser it will most likely work in Selenium. Note down the selector name=q, because we need it to create our Page Object. Next, we locate the second element - The Auto-suggest box Type any text on the searchbox and Auto-suggest box should appear Click on the element picker Point the element picker at the Auto-suggest box, then click. Note down the selector #searchform ul\u003eli, because we need it to create our Page Object. Next, we locate the third element - The The results element in the search result page Type any text on the searchbox and Auto-suggest box should appear Click on the first suggestion, which should transition to results page Click on the element picker Point the element picker at the result set box, then click. Note down the selector class=g, because we need it to create our Page Object. Quick info The following tutorials are great for beginner guide to DOM Introduction to DOM DOM \u0026 Tree Nodes Now that we have all the elements we need, Let’s build the Page Object google home page objectGoogleHomePage.java \" GoogleHomePage.java search result pageSearchResultsPage.java \" SearchResultsPage.java ","date":"2020-08-08","objectID":"/beginners-guide-to-designing-page-objects-pt.1/:3:1","tags":["Selenium","Automation"],"title":"A Beginner's Guide to Designing Page Objects - Pt.1","uri":"/beginners-guide-to-designing-page-objects-pt.1/"},{"categories":["UI Automation"],"content":"What have we done so far? We defined what we are testing Map out the user journey Found element locator values using the web console Confirmed we have the correct element using the console Created the page object with the correcet locators. ","date":"2020-08-08","objectID":"/beginners-guide-to-designing-page-objects-pt.1/:4:0","tags":["Selenium","Automation"],"title":"A Beginner's Guide to Designing Page Objects - Pt.1","uri":"/beginners-guide-to-designing-page-objects-pt.1/"},{"categories":["UI Automation"],"content":"See all classes here for easy reference. Note Don’t copy and paste. Type the below code by hand. Read this brilliant article to understand why. test classGoogleUITest.java \" GoogleUITest.java google home page objectGoogleHomePage.java \" GoogleHomePage.java search result pageSearchResultsPage.java \" SearchResultsPage.java ","date":"2020-08-08","objectID":"/beginners-guide-to-designing-page-objects-pt.1/:4:1","tags":["Selenium","Automation"],"title":"A Beginner's Guide to Designing Page Objects - Pt.1","uri":"/beginners-guide-to-designing-page-objects-pt.1/"},{"categories":["UI Automation"],"content":"Conclusion In this article you set up your first Page Object. Now you can run the test and put your result in the comments section. ","date":"2020-08-08","objectID":"/beginners-guide-to-designing-page-objects-pt.1/:5:0","tags":["Selenium","Automation"],"title":"A Beginner's Guide to Designing Page Objects - Pt.1","uri":"/beginners-guide-to-designing-page-objects-pt.1/"},{"categories":["UI Automation"],"content":"Things to Note Read next post in the series Apply design techniques to optimise the Page Object design. Before then, feel free to write another test and use completely different elements for the user journey. I am happy to answer questions you may have, reach me on any of my handles. ","date":"2020-08-08","objectID":"/beginners-guide-to-designing-page-objects-pt.1/:6:0","tags":["Selenium","Automation"],"title":"A Beginner's Guide to Designing Page Objects - Pt.1","uri":"/beginners-guide-to-designing-page-objects-pt.1/"},{"categories":["UI Automation"],"content":" The short answer is YES! ","date":"2020-07-12","objectID":"/should-i-remove-pageobjects-from-my-test-class/:0:0","tags":["Selenium","Automation"],"title":"Should I Remove PageObjects from my Test Class?","uri":"/should-i-remove-pageobjects-from-my-test-class/"},{"categories":["UI Automation"],"content":"Introduction The Page Object Pattern is a popular design pattern used to represent services provided by a page (reads the rendered page you see on your screen). Whilst this is a good pattern to drive the application under test, it should not be visible to the test class. ","date":"2020-07-12","objectID":"/should-i-remove-pageobjects-from-my-test-class/:1:0","tags":["Selenium","Automation"],"title":"Should I Remove PageObjects from my Test Class?","uri":"/should-i-remove-pageobjects-from-my-test-class/"},{"categories":["UI Automation"],"content":"Why? The test class is no longer isolated from internal code changes Binds the test class to the underlying technology/library Low-level code details pollute the test class The test class should represent the domain behaviours only, not the implementation. There are benefits to doing this: Your test is readable by engineers and non-technical colleagues Your test is resistant to superficial changes. Only a change to the domain behaviour will cause your test class change. Your test is technology agnostic, i.e. you are not bound to a particular technology. It improves discoverability for users of your framework. Let’s examine an example: Figure 1.1 From the above code, think about what happens in the following scenario: a. The search engine changes from Google to Bing b. If the method name changes from submitSearch() to search() c. If the underlying library changes from Selenium to HydrogenSulphur? Let’s refactor the test class in Figure 1.1 to focus on the domain behaviour removing the Page Object. Assume the tests verifies: The company name is the \"first link text\" in \"Search Results\" when they \"search for\" \"Selenium\" on any \"Search engine\". (Note: this is a trivia example, for illustration only) Then: Figure 1.2 As you can see there are no references to any page objects, instead domain wrapper classes are used to represent the business language. Let’s revisit the earlier questions based on the refactored test. -\u003e The search engine changes from `Google` to `Bing`? Test class is not aware of what engine is doing the search, so the test doesn't need to change -\u003e If the method name changes from `submitSearch()` to `search()`? The test only cares about the behaviour and results. Implementation is not the responsibility of the test. -\u003e If the underlying library changes from `Selenium` to `HydrogenSulphur`? The Test class is not bound to a specific library. In fact, you can use it as an API test without needing to change a single line ","date":"2020-07-12","objectID":"/should-i-remove-pageobjects-from-my-test-class/:2:0","tags":["Selenium","Automation"],"title":"Should I Remove PageObjects from my Test Class?","uri":"/should-i-remove-pageobjects-from-my-test-class/"},{"categories":["UI Automation"],"content":"Conclusion As with everything in life, context is key! Understand and utilise what is best for your workflow or design decision(s). However I’d recommend: Don’t let Page Objects bleed into your test. Test classes should only focus on business scenarios. Your test should focus on behaviour instead of implementation. Note Now go give your Test Class some ❤️! ","date":"2020-07-12","objectID":"/should-i-remove-pageobjects-from-my-test-class/:3:0","tags":["Selenium","Automation"],"title":"Should I Remove PageObjects from my Test Class?","uri":"/should-i-remove-pageobjects-from-my-test-class/"},{"categories":["Java"],"content":"Introduction Whilst building a demo application showcasing google AutoService, I encountered the below error: java.lang.NoSuchMethodError: com.google.common.collect.ImmutableSet.toImmutableSet()Ljava/util/stream/Collector; Searching through the internet, most solutions recommended upgrading the Google Guava version but that did not resolve the problem. The main cause of this error, was putting the wrong Autoservice dependency in the classpath. If your POM file has the below dependency, then you are most likely get this error. \u003c/dependencies\u003e \u003cdependency\u003e \u003cgroupId\u003ecom.google.auto.service\u003c/groupId\u003e \u003cartifactId\u003eauto-service\u003c/artifactId\u003e \u003cversion\u003e1.0-rc7\u003c/version\u003e \u003c/dependency\u003e \u003c/dependencies\u003e In this guide, you will solve the compilation error when using AutoService on a maven project. When you’re finished, you’ll be able to build jar files with the right META-INF/services information. ","date":"2020-07-05","objectID":"/how-to-solve-the-nosuchmethoderror-toimmutableset/:1:0","tags":["maven","autoservice","library","google"],"title":"How to solve the NoSuchMethodError toImmutableSet() error when using Google Autoservice","uri":"/how-to-solve-the-nosuchmethoderror-toimmutableset/"},{"categories":["Java"],"content":"Prerequisites Before you begin this guide: Read up the difference between a maven dependency and plugin This Stackoverflow Post answer this question Read Sonatype’s book Maven: A Complete Reference ","date":"2020-07-05","objectID":"/how-to-solve-the-nosuchmethoderror-toimmutableset/:2:0","tags":["maven","autoservice","library","google"],"title":"How to solve the NoSuchMethodError toImmutableSet() error when using Google Autoservice","uri":"/how-to-solve-the-nosuchmethoderror-toimmutableset/"},{"categories":["Java"],"content":"Step 1 — Check what is in your dependency tree We need to establish what we have in our dependency tree, because maven might be pulling in a version of the jar as a transitive dependency which might not work with your project Run the following command to see the jar file in your tree: mvn dependency:tree if the below are missing then follow step 2; com.google.auto.service:auto-service:jar:\u003cversion\u003e:compile com.google.auto.service:auto-service-annotations:jar:\u003cversion\u003e:compile ","date":"2020-07-05","objectID":"/how-to-solve-the-nosuchmethoderror-toimmutableset/:3:0","tags":["maven","autoservice","library","google"],"title":"How to solve the NoSuchMethodError toImmutableSet() error when using Google Autoservice","uri":"/how-to-solve-the-nosuchmethoderror-toimmutableset/"},{"categories":["Java"],"content":"Step 2 — Add AutoService Annotation Dependency to POM file Add the following compile-time dependency to your classpath so the project can compile and pull in the relevant classes. \u003cdependencies\u003e \u003cdependency\u003e \u003cgroupId\u003ecom.google.auto.service\u003c/groupId\u003e \u003cartifactId\u003eauto-service-annotations\u003c/artifactId\u003e \u003cversion\u003e${auto-service.version}\u003c/version\u003e \u003c/dependency\u003e \u003c/dependencies\u003e Run the below to ensure your project compiles: mvn clean compile Now run the package command to generate the jar file in your target directory mvn clean package Spy the content of the Jar file to view the generated AutoService metadata jar tf target/\u003cjar-filename\u003e.jar | grep META-INF/services/ You should not get any results. Developers sometimes, forget to include the right metadata instructions when creating the jar file and maven will not raise any error. This is the exact problem Autoservice solves for us, removing the need to tell maven of all your metadata rule. The next step will walk you through the process of adding the processor. ","date":"2020-07-05","objectID":"/how-to-solve-the-nosuchmethoderror-toimmutableset/:4:0","tags":["maven","autoservice","library","google"],"title":"How to solve the NoSuchMethodError toImmutableSet() error when using Google Autoservice","uri":"/how-to-solve-the-nosuchmethoderror-toimmutableset/"},{"categories":["Java"],"content":"Step 3 — Tell Maven to generate the Metadata Add the following configuration to the compiler plugin \u003cplugins\u003e \u003cplugin\u003e \u003cartifactId\u003emaven-compiler-plugin\u003c/artifactId\u003e \u003cconfiguration\u003e \u003cannotationProcessorPaths\u003e \u003cpath\u003e \u003cgroupId\u003ecom.google.auto.service\u003c/groupId\u003e \u003cartifactId\u003eauto-service\u003c/artifactId\u003e \u003cversion\u003e${auto-service.version}\u003c/version\u003e \u003c/path\u003e \u003c/annotationProcessorPaths\u003e \u003c/configuration\u003e \u003c/plugin\u003e \u003c/plugins\u003e Now run the package again to generate the jar file in your target directory mvn clean package Spy the content of the Jar file again, to view the generated metadata jar tf target/\u003cjar-filename\u003e.jar | grep META-INF/services/ Assuming our processor class is org.ihq.MyAutoclass, this time the output should resemble below META-INF/services/ META-INF/services/org.ihq.MyAutoclass ","date":"2020-07-05","objectID":"/how-to-solve-the-nosuchmethoderror-toimmutableset/:5:0","tags":["maven","autoservice","library","google"],"title":"How to solve the NoSuchMethodError toImmutableSet() error when using Google Autoservice","uri":"/how-to-solve-the-nosuchmethoderror-toimmutableset/"},{"categories":["Java"],"content":"Conclusion You’ve set up Google AutoService with Maven to autogenerate metadata without compile error(s). ","date":"2020-07-05","objectID":"/how-to-solve-the-nosuchmethoderror-toimmutableset/:6:0","tags":["maven","autoservice","library","google"],"title":"How to solve the NoSuchMethodError toImmutableSet() error when using Google Autoservice","uri":"/how-to-solve-the-nosuchmethoderror-toimmutableset/"}]